--- plague-0.3.1/server/UserInterface.py.enqueue-fix	2005-08-14 23:27:44.000000000 -0400
+++ plague-0.3.1/server/UserInterface.py	2005-08-14 23:28:39.000000000 -0400
@@ -135,24 +135,24 @@
         if config_opts['use_srpm_not_cvs'] == True:
             email_result(email, cvs_tag, "Error setting up build for %s on "\
                     "%s: this server builds SRPMs, not CVS checkouts." % (cvs_tag, target))
-            return (-1, "This build server is set up for building SRPMS only.  Use the 'enqueue_srpm' command instead.")
+            return (-1, "This build server is set up for building SRPMS only.  Use the 'enqueue_srpm' command instead.", -1)
 
         if not validate_package_name(package):
             email_result(email, cvs_tag, "Error setting up build for %s on "\
                     "%s: Package name '%s' contained an illegal character.  Submit a bug report?" % (cvs_tag, target, package))
-            return (-1, "The package name contained an illegal character.")
+            return (-1, "The package name contained an illegal character.", -1)
 
         if not validate_cvs_tag(cvs_tag):
             email_result(email, cvs_tag, "Error setting up build for %s on "\
                     "%s: The CVS tag '%s' contained an illegal character.  Submit a bug report?" % (package, target, cvs_tag))
-            return (-1, "The CVS tag contained an illegal character.")
+            return (-1, "The CVS tag contained an illegal character.", -1)
 
         try:
             real_target = resolve_target(target)
         except InvalidTargetError:
             email_result(email, cvs_tag, "Error setting up build for %s on "\
                     "%s: target does not exist." % (cvs_tag, target))
-            return (-1, "This build server does not support the target %s." % target)
+            return (-1, "This build server does not support the target %s." % target, -1)
         else:
             print "Request to enqueue '%s' tag '%s' for target '%s' (user '%s')" % (package, cvs_tag, real_target, email)
             req = self._bm.create_job_request(email, package, cvs_tag, real_target, buildreq, time.time())
@@ -166,31 +166,31 @@
         if config_opts['use_srpm_not_cvs'] == False:
             email_result(email, srpm_file, "Error setting up build for %s on "\
                     "%s: this server builds CVS checkouts, not SRPMS." % (srpm_file, target))
-            return (-1, "This build server is set up for building from CVS.  Use the 'enqueue' command instead.")
+            return (-1, "This build server is set up for building from CVS.  Use the 'enqueue' command instead.", -1)
 
         if not validate_package_name(package):
             email_result(email, srpm_file, "Error setting up build for %s on "\
                     "%s: Package name '%s' contained an illegal character.  Submit a bug report?" % (package, target, package))
-            return (-1, "The package name contained an illegal character.")
+            return (-1, "The package name contained an illegal character.", -1)
 
         # We limit the database field to 255 chars
         if len(srpm_file) > 255:
             email_result(email, srpm_file, "Error setting up build for %s on "\
                     "%s: try using a shorter path to the SRPM (< 255 chars)." % (srpm_file, target))
-            return (-1, "Pathname to SRPM is limited to 255 characters.")
+            return (-1, "Pathname to SRPM is limited to 255 characters.", -1)
 
         srpm_file = os.path.abspath(srpm_file)
         if not srpm_file or not os.access(srpm_file, os.R_OK):
             email_result(email, srpm_file, "Error setting up build for %s on "\
                     "%s: The SRPM does not exist, or is not accessible.  Remember to use absolute paths." % (srpm_file, target))
-            return (-1, "SRPM does not exist or is not accessible, remember to use absolute paths.")
+            return (-1, "SRPM does not exist or is not accessible, remember to use absolute paths.", -1)
 
         try:
             real_target = resolve_target(target)
         except InvalidTargetError:
             email_result(email, srpm_file, "Error setting up build for %s on "\
                     "%s: target does not exist." % (srpm_file, target))
-            return (-1, "This build server does not support the target %s." % target)
+            return (-1, "This build server does not support the target %s." % target, -1)
         else:
             print "Request to enqueue '%s' file '%s' for target '%s' (user '%s')" % (package, srpm_file, real_target, email)
             req = self._bm.create_job_request(email, package, srpm_file, real_target, buildreq, time.time())
