diff -Nur plague-0.4.5-orig/builder/builder.py plague-0.4.5/builder/builder.py
--- plague-0.4.5-orig/builder/builder.py	2008-01-31 18:21:32.000000000 +0100
+++ plague-0.4.5/builder/builder.py	2008-01-31 18:58:40.000000000 +0100
@@ -108,9 +108,7 @@
         if not os.path.exists(self._result_dir):
             os.makedirs(self._result_dir)
 
-        self._state_dir = os.path.join(self._work_dir, self._uniqid, "mock-state")
-        if not os.path.exists(self._state_dir):
-            os.makedirs(self._state_dir)
+        self._state_file = os.path.join(self._result_dir,"state.log")
 
         logfile = os.path.join(self._result_dir, "job.log")
         self._log_fd = open(logfile, "w+")
@@ -218,12 +216,12 @@
                 args.append(arg)
             cmd = os.path.abspath(arg_list[0])
         args.append(builder_cmd)
+        args.append("rebuild")
         args.append("-r")
         args.append(self.buildroot)
         args.append("--arch")
         args.append(self.buildarch)
         args.append("--resultdir=%s" % self._result_dir)
-        args.append("--statedir=%s" % self._state_dir)
         args.append("--uniqueext=%s" % self._uniqid)
         args.append(self._srpm_path)
         self._log("   %s\n" % string.join(args))
@@ -257,14 +255,14 @@
     def _mock_is_prepping(self):
         mock_status = self._get_mock_status()
         if mock_status:
-            prepstates = ['init','prep','unpa','crea','setu']
+            prepstates = ['enabl','creating cache','unpacking cache','setup']
             for s in prepstates:
-                if mock_status == s:
+                if mock_status.startswith(s):
                     return True
         return False
 
     def _get_mock_status(self):
-        mockstatusfile = os.path.join(self._state_dir, 'status')
+        mockstatusfile = self._state_file
         if not os.path.exists(mockstatusfile):
             return None
 
@@ -273,8 +271,7 @@
         
         while True:
             try:
-                f.seek(0, 0)
-                string = f.read(4)
+                lines = f.readlines()
             except OSError, e:
                 if e.errno == errno.EAGAIN:
                     try:
@@ -283,12 +280,19 @@
                         pass
                     continue
             else:
-                if len(string) < 4:
+                if not len(lines):
                     continue
                 break
         f.close()
-        string = string.lower()
-        return string
+        mockstat = None
+        lastline = lines[len(lines)-1].lower()
+        statedelim = "state changed:"
+        stateidx = lastline.rfind(statedelim)
+        if stateidx>0:
+            mockstat = lastline[stateidx+len(statedelim):].lstrip()
+            return mockstat
+        else:
+            return None
 
     def _read_mock_config(self):
         mockconfigfile = os.path.join(self._result_dir, 'mockconfig.log')
@@ -353,8 +357,7 @@
     def _status_prepping(self):
         # We need to make sure that mock has dumped the status file withing a certain
         # amount of time, otherwise we can't tell what it's doing
-        mockstatusfile = os.path.join(self._state_dir, 'status')
-        if not os.path.exists(mockstatusfile):
+        if not os.path.exists(self._state_file):
             # something is wrong if mock takes more than 15s to write the status file
             if time.time() > self._mockstarttime + 15:
                 self._mockstarttime = 0
@@ -383,9 +386,6 @@
                     if mock_root_dir.endswith(self._uniqid):
                         shutil.rmtree(mock_root_dir, ignore_errors=True)
 
-                if self._mock_config.has_key('statedir'):
-                    shutil.rmtree(self._mock_config['statedir'], ignore_errors=True)
-
                 source_dir = os.path.abspath(os.path.join(self._mock_config['rootdir'], "../source"))
                 # Ensure we're actually deleteing the job's sourcedir
                 if source_dir.endswith(os.path.join(self._uniqid, "source")):
