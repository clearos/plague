diff -Nur plague-0.4.5-orig/server/BuildMaster.py plague-0.4.5/server/BuildMaster.py
--- plague-0.4.5-orig/server/BuildMaster.py	2008-01-31 15:21:09.000000000 +0100
+++ plague-0.4.5/server/BuildMaster.py	2008-06-14 14:25:54.000000000 +0200
@@ -65,10 +65,6 @@
         self._building_jobs = {}
         self._building_jobs_lock = threading.Lock()
 
-        self._dbcx = self._db_manager.dbcx()
-        self._cursor = self._dbcx.cursor()
-
-        self._requeue_interrupted_jobs()
         threading.Thread.__init__(self)
         self.setName("BuildMaster")
 
@@ -397,6 +393,12 @@
 
     def run(self):
         DebugUtils.registerThreadName(self)
+
+        self._dbcx = self._db_manager.dbcx()
+        self._cursor = self._dbcx.cursor()
+
+        self._requeue_interrupted_jobs()
+
         while self.should_stop == False:
             # Write update status for jobs to the database
             self._save_job_status()
diff -Nur plague-0.4.5-orig/server/DBManager.py plague-0.4.5/server/DBManager.py
--- plague-0.4.5-orig/server/DBManager.py	2008-01-31 15:21:09.000000000 +0100
+++ plague-0.4.5/server/DBManager.py	2008-06-14 14:25:54.000000000 +0200
@@ -124,11 +124,15 @@
 
     def fetchall(self, cursor):
         """ sqlite returns the items in a dict-like class already """
-        return cursor.fetchall()
+        rows = cursor.fetchall()
+        return [ResultSet(row, cursor.description) for row in rows]
 
     def fetchone(self, cursor):
         """ sqlite returns the items in a dict-like class already """
-        return cursor.fetchone()
+        row = cursor.fetchone()
+        if not row:
+            return None
+        return ResultSet(row, cursor.description)
 
     def _connect(self):
         try:
@@ -143,7 +147,7 @@
             tm = 3
 
         try:
-            dbcx = sqlite.connect(dbloc, encoding="utf-8", timeout=tm)
+            dbcx = sqlite.connect(dbloc)
         except StandardError, e:
             print "Error: %s" % e
             os._exit(1)
@@ -266,8 +270,8 @@
 # isn't present, remove its class entry from
 # the db engine dict
 try:
-    import sqlite
-except ImportError, e:
+    import sqlite3 as sqlite
+except ImportError:
     db_engines['sqlite'] = None
 
 try:
diff -Nur plague-0.4.5-orig/server/UserInterface.py plague-0.4.5/server/UserInterface.py
--- plague-0.4.5-orig/server/UserInterface.py	2008-01-31 15:21:09.000000000 +0100
+++ plague-0.4.5/server/UserInterface.py	2008-06-14 14:25:54.000000000 +0200
@@ -84,6 +84,12 @@
     return target_cfg
 
 
+def _fetchone(cursor,row):  # sqlite3 helper
+    if not row:
+        return None
+    return DBManager.ResultSet(row, cursor.description)
+
+
 class UserInterface:
     """
     Base UserInterface class. NO AUTHENTICATION.  Subclass this to provide some.
@@ -184,7 +190,7 @@
             del curs, dbcx
             return (-1, "Unable to access job database: '%s'" % e)
         curs.execute(sql)
-        job = dbcx.fetchone(curs)
+        job = _fetchone(curs,dbcx.fetchone(curs))
         result = None
         if not job:
             result = (-1, "Error: Invalid job UID.")
@@ -318,7 +324,7 @@
             del curs, dbcx
             return (-1, "Unable to access job database: '%s'" % e, [])
         curs.execute(sql)
-        data = dbcx.fetchall(curs)
+        data = [DBManager.ResultSet(row,curs.description) for row in curs.fetchall()]
         jobs = []
         for row in data:
             jobrec = {}
@@ -349,7 +355,7 @@
             sql = "SELECT jobid, parent_uid, starttime, endtime, arch, builder_addr, "  \
                     "status, builder_status FROM archjobs WHERE " + uids
             curs.execute(sql)
-            data = dbcx.fetchall(curs)
+            data = [DBManager.ResultSet(row,curs.description) for row in curs.fetchall()]
             for row in data:
                 ajrec = {}
                 ajrec['jobid'] = row['jobid']
@@ -386,7 +392,7 @@
         except StandardError, e:
             return (-1, "Unable to access job database: '%s'" % e, {})
         curs.execute(sql)
-        job = dbcx.fetchone(curs)
+        job = _fetchone(curs,dbcx.fetchone(curs))
         if not job:
             del curs, dbcx
             return (-1, "Error: Invalid job UID.", {})
@@ -420,7 +426,7 @@
         sql = "SELECT jobid, parent_uid, starttime, endtime, arch, builder_addr, "    \
                 "status, builder_status FROM archjobs WHERE parent_uid=%d " % uid
         curs.execute(sql)
-        data = dbcx.fetchall(curs)
+        data = [DBManager.ResultSet(row,curs.description) for row in curs.fetchall()]
         for row in data:
             ajrec = {}
             ajrec['jobid'] = row['jobid']
@@ -541,7 +547,7 @@
             return (-1, "Unable to access job database: '%s'" % e)
 
         curs.execute(sql)
-        job = dbcx.fetchone(curs)
+        job = _fetchone(curs,dbcx.fetchone(curs))
 
         result = None
         if not job:
@@ -630,7 +636,7 @@
             return (-1, "Unable to access job database: '%s'" % e)
 
         curs.execute(sql)
-        data = dbcx.fetchall(curs)
+        data = [DBManager.ResultSet(row,curs.description) for row in curs.fetchall()]
 
         # Ensure that the user can actually finish the jobs they requested
         final_uid_list = []
diff -Nur plague-0.4.5-orig/server/User.py plague-0.4.5/server/User.py
--- plague-0.4.5-orig/server/User.py	2008-01-31 15:21:09.000000000 +0100
+++ plague-0.4.5/server/User.py	2008-06-14 14:25:54.000000000 +0200
@@ -15,7 +15,11 @@
 # Copyright 2005 Dan Williams <dcbw@redhat.com> and Red Hat, Inc.
 
 
-import sqlite
+import sqlite3 as sqlite
+
+import sys
+sys.path.append('/usr/share/plague/server')
+from DBManager import ResultSet
 
 CONFIG_LOCATION = "/etc/plague/server/"
 
@@ -30,10 +34,9 @@
         self.user_admin = False
         self.server_admin = False
 
-
 def get_userdb_dbcx():
     try:
-        dbcx = sqlite.connect(CONFIG_LOCATION + "userdb", encoding="utf-8", timeout=4)
+        dbcx = sqlite.connect(CONFIG_LOCATION + "userdb")
         curs = dbcx.cursor()
         return (dbcx, curs)
     except sqlite.DatabaseError, e:
@@ -57,7 +60,7 @@
         try:
             curs.execute('SELECT * FROM users')
             dbcx.commit()
-        except sqlite._sqlite.DatabaseError, e:
+        except sqlite.DatabaseError, e:
             create = True
 
         if create:
@@ -81,6 +84,7 @@
         dbcx.commit()
         item = curs.fetchone()
         if item:
+            item = ResultSet(item, curs.description)
             user = User(email, False)
             user.own_jobs = item['own_jobs']
             user.job_admin = item['job_admin']
diff -Nur plague-0.4.5-orig/utils/user-manager.py plague-0.4.5/utils/user-manager.py
--- plague-0.4.5-orig/utils/user-manager.py	2005-08-08 18:15:18.000000000 +0200
+++ plague-0.4.5/utils/user-manager.py	2008-06-14 14:25:54.000000000 +0200
@@ -18,7 +18,10 @@
 
 
 import sys, os
-import sqlite
+import sqlite3
+
+sys.path.append('/usr/share/plague/server')
+from DBManager import ResultSet
 
 
 def print_usage(prog):
@@ -38,7 +41,7 @@
 
 class UserManager:
     def __init__(self, dbfile):
-        self.dbcx = sqlite.connect(dbfile, encoding="utf-8", timeout=2)
+        self.dbcx = sqlite3.connect(dbfile)
         self.curs = self.dbcx.cursor()
 
         # Ensure the table exists in the database
@@ -176,7 +179,7 @@
 
         self.curs.execute(sql)
         self.dbcx.commit()
-        data = self.curs.fetchall()
+        data = [ResultSet(row,self.curs.description) for row in self.curs.fetchall()]
         if not len(data):
             raise UserManagerException("No matching users found.")
 
